import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
}

SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");
def maxJV = "8";//this should be updated when a new version of java is supported.
String javaVersion = "" + Integer.parseInt(project.hasProperty("javaVersion") ? (project.javaVersion.isEmpty() ? maxJV : project.javaVersion) : maxJV)
if (javaVersion.contains(".")) {
    javaVersion = javaVersion.substring(("" + javaVersion).indexOf(".") + 1);
}

//-Dorg.gradle.java.home=<path to jdk>
def vbase = '1.0'
def v = "${vbase}." + sdf.format(new Date());
def release = project.hasProperty("release") ? (project.release.equals("final") | project.release.equals("release") ? '' : project.release) : 'beta'

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    version = v + release;
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 5, TimeUnit.SECONDS
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4' //version required
}

subprojects {
    configurations {
        annotations;
    }
    boolean oneOff = project.hasProperty("oneOff")
    def projectName = "${project.name}" + javaVersion
    projectName = projectName.replace(":", "").replace("module", "")
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    //apply plugin: 'application'

    project.ext.set("internalVersion", vbase);
    project.ext.set("javaVersion", Integer.parseInt(javaVersion));
    project.ext.set("maxJV", maxJV);
    idea {
        module {
            name = "${project.name}"
        }
    }
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    //def testRemote = project.hasProperty("remoteTest")?project.remoteTest.equals("true"):false;
    def testGroup = project.hasProperty("testGroup") ? (project.testGroup.equals("all") ? "unit,integration" : project.testGroup) : 'unit'
    def excludeGroup = project.hasProperty("excludeGroup") ? project.excludeGroup : ''
    def testSuite = project.hasProperty("testSuite") ? project.testSuite : ''
    def forks = project.hasProperty("forks") ? (project.forks.isEmpty() ? "1" : project.forks) : '1'
    def forksEvery = project.hasProperty("forksEvery") ? (project.forksEvery.isEmpty() ? "" : project.forksEvery) : ''
    def threads = project.hasProperty("threads") ? (project.threads.isEmpty() ? "1" : project.threads) : '1'
    dependencies {
        testCompile 'ch.qos.logback:logback-classic:1.1.7'
        testCompile 'ch.qos.logback:logback-access:1.1.7'
        testCompile 'ch.qos.logback:logback-core:1.1.7'
        testCompile 'org.codehaus.janino:janino:2.7.8'
        compileOnly "org.atteo.classindex:classindex:3.3"
    }

    test {
        systemProperties System.getProperties();
        //setting checkTemplateLocation to false since they are not used.
        systemProperty "spring.freemarker.checkTemplateLocation", "false";
        systemProperty "spring.velocity.checkTemplateLocation", "false";
        systemProperty "user.dir", project.buildscript.sourceFile.parentFile.path
        useTestNG() {
            listeners << "org.testng.reporters.XMLReporter"
            if (testSuite.equals('')) {
                //System.out.println("\tgroup: " + testGroup)
                maxParallelForks = Long.parseLong("${forks}")
                if (!forksEvery.isEmpty()) {
                    forkEvery = Long.parseLong("${forksEvery}")
                }
                parallel = "tests"
                threadCount = Long.parseLong("${threads}")
                if (!testGroup.equals('')) {
                    includeGroups "${testGroup}"
                }
                if (!excludeGroup.equals('')) {
                    excludeGroups "${excludeGroup}"
                }
            } else {
                //println "executing test suite ${testSuite}"
                suites "${testSuite}"
                //useDefaultListeners true
            }
        }
    }
    jar.baseName = projectName

    sourceSets {
        test {
            resources { srcDirs "cucumbers" }
        }
    }
    jacoco {
        toolVersion = "0.7.6.201602180812"
    }
    test.finalizedBy(project.tasks.jacocoTestReport)/**/
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

// get class dirs for project dependencies
FileCollection getJacocoClassDirs() {
    Set srcDirs = subprojects.sourceSets.main.output
    return files(srcDirs)
}

FileCollection getJacocoExecFiles() {
    Set srcDirs = subprojects.jacocoTestReport.executionData
    Iterator it = srcDirs.iterator()
    while (it.hasNext()) {
        FileCollection fc = it.next()
        for (File f : fc.files) {
            if (f.exists()) {
                System.out.println(f.absolutePath)
            } else {
                it.remove()
                System.out.println("\tremoving: " + f.absolutePath)
            }
        }
    }
    return files(srcDirs)
}

// get source dirs for project dependencies
FileCollection getJacocoSrcDirs() {
    Set srcDirs = subprojects.sourceSets.main.allSource.srcDirs
    return files(srcDirs)
}

task jacocoMerge(type: JacocoMerge) {
    executionData = getJacocoExecFiles()
    destinationFile = project.file("$buildDir/jacoco/data/jacoco.exec")
}

// generate coverage report for this project and all its project dependencies
task jacocoMergedReport(type: JacocoReport) {
    dependsOn jacocoMerge
    System.out.println("merged execs: " + jacocoMerge.destinationFile);
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "$buildDir/reports/jacoco"
    }

    classDirectories = files(getJacocoClassDirs().collect {
        fileTree(dir: it, exclude: ['com/**/gradle/**'])
    })
    sourceDirectories = getJacocoSrcDirs()

    executionData jacocoMerge.destinationFile
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
